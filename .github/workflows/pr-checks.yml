name: Pull Request Checks

on:
  pull_request:
    branches: [ main ]

jobs:
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lejournal
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8.14.1'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Set DATABASE_URL
        run: echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/lejournal" >> $GITHUB_ENV

      - name: Verify DATABASE_URL
        run: echo "DATABASE_URL=$DATABASE_URL"

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Check if lockfile is outdated
        run: pnpm install --check || echo "PNPM_LOCKFILE_OUTDATED=true" >> $GITHUB_ENV

      - name: Install dependencies (force update if needed)
        run: |
          if [ "$PNPM_LOCKFILE_OUTDATED" == "true" ]; then
            pnpm install --no-frozen-lockfile
          else
            pnpm install --frozen-lockfile
          fi

      - name: Prisma init
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/lejournal"
        run: pnpm --filter backend run prisma:init

      - name: Generate Prisma types first
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/lejournal"
        run: pnpm --filter backend run prisma

      - name: Build shared packages
        run: pnpm --filter "@le-journal/shared-types" build

      - name: Run lint with fix
        run: pnpm lint:fix

      - name: Run format with fix
        run: pnpm format:fix

      - name: Type check
        run: pnpm typecheck

      # - name: Run tests
      #   env:
      #     DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/lejournal"
      #   run: pnpm test

      - name: Debug DB env
        run: echo "DATABASE_URL=$DATABASE_URL"
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Build
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/lejournal"
        run: pnpm build

      - name: Check for changes
        id: git-check
        run: |
          if git diff --quiet; then
            echo "changes=false" >> $GITHUB_ENV
          else
            echo "changes=true" >> $GITHUB_ENV
            git status
          fi

      # - name: Commit linting & formatting changes
      #   if: env.changes == 'true'
      #   run: |
      #     git config --local user.email "github-actions[bot]@users.noreply.github.com"
      #     git config --local user.name "github-actions[bot]"
      #     git commit -am "chore(style): apply linting and formatting fixes" --no-verify
      #     git push

  security-scan:
    name: OWASP Dependency-Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: '${{ github.repository }}'
          path: '.'
          format: 'HTML'
          out: 'dependency-check-report'
          args: '--failOnCVSS 7'

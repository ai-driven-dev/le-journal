# Project rules

## When giving Instructions

- Do not take care of cases in user s prompt (me).
- Always follow that case:
  - kebab-case : folder names.
  - camelCase : store filenames, function and variable names.
  - PascalCase : Components and class names.
  - snake_case : environment variables.
  - Constants: UPPERCASE
  - Interface : Precise "I"
- Focus only on changes you mentioned, do NOT over-interpret.

## Current projet versions

- Monorepo: Turborepo 2.4+
- Frontend: Remix 2.5+, React v19
  - ShadCN: 2.3
  - Vitest: 1.2+
  - Vite: 5.1+
  - MobX: 6.3+
- Backend: NestJS v11+ with Node LTS 22
  - Prisma :6.3+
  - Jest: 29+ with @nestjs/testing

## On package installation

- Always use latest available version of packages.
- Use PNPM instead of NPM.
- Never install package globally, use pnpm -D for development dependencies instead.
- Never auto-install packages without my confirmation.

## Global code generation rules

- **Strict Type for every variables, functions and components.**
- Minimal file size.
- Use single responsibility principle.
- Never generate anemic models.
- Never comment code, except for complexe logic, interfaces, configuration.

### Before coding

1. Generate a plan overview of what you are going to do.
2. Print the lib versions explicitly to make sure you are on the right one.
3. Check officiel documentation.

### After coding

1. Check for best practices.
2. Assert no duplicate code or dead code.
3. Check online documentation to assert correctness.
4. Verify your work, propose user to run checks if needed.

## Frontend coding rules

- Test with Vitest.
- Use "Vite" instead of "Webpack".
- Use "eslint.config.js" with flat config when using Eslint.

### Remix

- Always use "Remix" instead of "NextJS".
- Use "@remix-run/node" for server rendering.
- Use "@remix-run/react" for client rendering.
- Do not return json(), use plain objects instead.

#### Remix Routing

- `app/routes` must be used.
- Follow the official documentation for routing:

```text
app/
├── routes/
│   ├── _index/
│   │   ├── signup-form.tsx
│   │   └── route.tsx
│   ├── about/
│   │   ├── header.tsx
│   │   └── route.tsx
│   ├── concerts/
│   │   ├── favorites-cookie.ts
│   │   └── route.tsx
│   ├── concerts.$city/
│   │   └── route.tsx
│   ├── concerts._index/
│   │   ├── featured.tsx
│   │   └── route.tsx
│   └── concerts.trending/
│       ├── card.tsx
│       ├── route.tsx
│       └── sponsored.tsx
└── root.tsx
```

### Import 

- use "/~" for root import.

### Frontend Architecture

- Feature based folder structure.
Example 
```text
user-profile/
| user-profile.component.tsx
| user-profile.store.ts
| user-profile.hook.ts
| user-profile.type.ts
```

### Component generation with MobX

- Use "mobx-react-lite" instead of "mobx-react".
- Use "mobx" for core.
- Behavior based store, focused on domain, semantical.
- Use `makeAutoObservable`, no annotations.
- Prefer computed for Derived State.
- Always Use Actions to Modify State.
- Use runInAction for Side Effects (especially when async).
- Avoid Overusing Observables in Large Stores, split by parent > children logic.
- Use reaction for Side Effects.

## Backend rules

- Never user "Express".
- Use types generated from Prisma when looking for database typing.
- DDD and clean architecture for backend.
- Prisma types are used for entities.

### Backend tests

- Use Jest.
- Prisma uses its own migrations in tests-migrations.
- Prisma uses its own sqlite in tests, migrations are played when starting tests.

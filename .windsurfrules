# Project rules

- Mobile first.
- Always use latest versions in [package.json](mdc:apps/frontend/package.json).
- Remix only, no NextJS.
- Root imports with `/~`.
- Test with `Vitest`.
- Use `Vite`, not `Webpack`.
- `ESLint` with flat config. 
- Focus on accessibility (a11y) when generating HTML.
- Use latest `tailwind` functionnalities (3.4+).

- Most of the validation is done here with `class-validator`.
- This type is used "as-is" in frontend.
- This type is extended in backend's Domain models to ensure coherence.

Example `packages/shared-types/src/project.type.ts`:
```typescript
import { PickType } from '@nestjs/mapped-types';
import { IsDate, IsEmail, IsNotEmpty, IsNumber, IsString } from 'class-validator';

export class ProjectType {
  @IsString()
  @IsNotEmpty()
  id!: string;

  @IsString()
  @IsNotEmpty()
  name!: string;

  @IsString()
  @IsNotEmpty()
  slug!: string;

  @IsString()
  @IsNotEmpty()
  userId!: string;

  @IsString()
  @IsNotEmpty()
  @IsEmail()
  newsletterAlias!: string;

  @IsNumber()
  @IsNotEmpty()
  projectNumber!: number;

  @IsDate()
  @IsNotEmpty()
  createdAt!: Date;

  @IsString()
  promptInstruction!: string;
}
```

- Calling repositories might no be necessary except to validate domain logic, most of the time use prisma client directly.
- Must use types in `@prisma/client`.
- Avoid delete in seeds, db is emptied on seed command's lunch in [package.json](mdc:apps/backend/package.json) .
- Wrapped in transactions.
- Injected as NestJS services for DI.
- Info: seeds are ran from commands in [main-cli.ts](mdc:apps/backend/src/main-cli.ts) and [seeds.module.ts](mdc:apps/backend/src/infrastructure/database/seeds.module.ts) .

Example (`infrastructure/database/seeds/users.seed.ts`):
```typescript
import { Injectable } from '@nestjs/common';
import { Prisma, PrismaClient, User } from '@prisma/client';

@Injectable()
export class UsersSeed {

  private readonly standardUser: Prisma.UserCreateInput = {
    email: 'user.standard@example.com',
    name: 'Standard User',
    role: 'REGULAR',
    google_id: '1234567891',
    avatar: 'https://example.com/avatar.png',
    refresh_token: '1234567891',
  };

  async seed(
    tx: Omit<
      PrismaClient,
      '$connect' | '$disconnect' | '$on' | '$transaction' | '$use' | '$extends'
    >,
  ): Promise<User[]> {
    console.info('üßë‚Äçüíª Seeding users...');

    const users = await Promise.all([
      tx.user.create({ data: this.standardUser }),
    ]);

    return users;
  }
}
```

- Loaders must be used in routes.
- Return plain objects instead of `json()`.

- Use `NestJS` DI.
- Use Prisma types from [prisma.types.ts](mdc:apps/backend/src/prisma/prisma.types.ts).
- Implements [mapper.interface.ts](mdc:apps/backend/src/presentation/mapper.interface.ts) with <Domain, Model>.
- Reassign every props (mandatory).
- Return plain objects, no instances.
- Mappers convert between DTOs, Domain objects, and Prisma types to prevent dependencies.

Example `projects/presentation/project.mapper.ts`:
```typescript
import { Injectable } from '@nestjs/common';
import { ProjectModel } from 'src/prisma/prisma.types';

import { Project } from '../domain/project';

import { Mapper } from 'src/presentation/mapper.interface';

@Injectable()
export class ProjectMapper implements Mapper<Project, ProjectModel> {
  toModel(domain: Project): ProjectModel {
    return {
      id: domain.id,
      name: domain.name,
      slug: domain.slug,
      newsletter_alias: domain.newsletterAlias,
      project_number: domain.projectNumber,
      created_at: domain.createdAt,
      prompt_instruction: domain.promptInstruction,
      user_id: domain.userId,
    };
  }

  toDomain(model: ProjectModel): Project {
    return {
      id: model.id,
      name: model.name,
      slug: model.slug,
      newsletterAlias: model.newsletter_alias,
      projectNumber: model.project_number,
      createdAt: model.created_at,
      promptInstruction: model.prompt_instruction,
      userId: model.user_id,
    };
  }
}
```

- Use observer from mobx-react-lite on React components to track state changes.
- Dump component, no logic, logics is in store [rule-frontend-store.mdc](mdc:.cursor/rules/rule-frontend-store.mdc) .
- No default export for components.
- Export static `displayName` at the bottom.
- const at the top.
- Separate with line jumb `hooks` and regular const.
- Early returns.
- Strong typing.
- Use ShadCN from `~/components/ui`.
- One component per file.
- Pass parent parameters `store` to children components and UI if necessary (e.g. `formRef`)

Example child component (`features/dashboard/custom-instructions/custom-instructions-confirmation.component.tsx`):
```typescript
interface CustomInstructionsConfirmationProps {
  store: CustomInstructionsStore;
  formRef: React.RefObject<HTMLFormElement>;
}

export const CustomInstructionsConfirmation: FC<CustomInstructionsConfirmationProps> = observer(
  ({ store, formRef }) => {
    const { isDialogOpen, isSubmitting, instructionLength, openDialog, closeDialog } = store;

    const handleConfirm = (): void => {
      store.closeDialog();
      formRef.current?.requestSubmit();
    };

    return (
      <div className="flex flex-col justify-between">
        <span className="text-sm text-gray-500">{instructionLength}/200 tokens</span>

        // ...
      </div>
    );
  },
);

CustomInstructionsConfirmation.displayName = 'CustomInstructionsConfirmation';
```

Example main component (`features/dashboard/custom-instructions/custom-instructions.component.tsx`): 
```typescript
import { PROJECT_MAX_LENGTH, PROJECT_MIN_LENGTH } from '@le-journal/shared-types';
import { observer } from 'mobx-react-lite';
import { useRef, type FC } from 'react';

import { useDashboardStores } from '../dashboard.context';

import { Skeleton } from '~/components/ui/skeleton';
import { Textarea } from '~/components/ui/textarea';

export const CustomInstructions: FC = observer(() => {
  const formRef = useRef<HTMLFormElement>(null);
  const { dashboardStore } = useDashboardStores();

  const store = dashboardStore.customInstructions;
  const state = store.state;

  if (state === null || store.isLoading) {
    return <Skeleton className="h-[200px]" />;
  }

  return (
    <div className="mt-auto sticky bottom-0 bg-white border-t p-4">
      <label htmlFor="ai-customization" className="block text-sm font-medium text-gray-700 mb-2">
        Comment devrions-nous personnaliser votre score de newsletter ? Que souhaitez-vous voir plus
        ou moins ?
      </label>
      <form ref={formRef} onSubmit={store.save} className="space-y-4">
        <div className="flex space-x-4">
          <input type="hidden" name="id" value={state.id} />
          <Textarea
            name="promptInstruction"
            disabled={store.isSubmitting}
            value={state.promptInstruction}
            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>
              store.changeInstruction(e.target.value)
            }
            minLength={PROJECT_MIN_LENGTH}
            maxLength={PROJECT_MAX_LENGTH}
            className="flex-1"
            placeholder="Entrez vos pr√©f√©rences de personnalisation..."
          />
        </div>
      </form>
    </div>
  );
});

CustomInstructions.displayName = 'CustomInstructions';

```

- Repository implements its interface.
- Always export const with `KEY` that must be used in `controllers`, `use-cases` and `modules`.
- Type with `Model.Property` instead of primitive if possible (e.g. `email: string` -> `email: User['email']`).
- Wrap db calls in Prisma Transactions if necessary.
- A Repository returns only Domain objects, never DTOs or Prisma types.
- Prisma types stay in Repositories, never leaving Infrastructure.

Example usage in controller/use-case:
```typescript
constructor(
  @Inject(USER_REPOSITORY)
  private readonly userRepository: UserRepository,
  private readonly userMapper: UserMapper,
) {}
```

Example usage in modules:
```typescript
@Module({
  imports: [PrismaModule],
  controllers: [UsersController],
  providers: [
    GetAllUsersUseCase,
    UserMapper,
    {
      provide: USER_REPOSITORY,
      useClass: PrismaUserRepository,
    },
  ],
  exports: [GetAllUsersUseCase, USER_REPOSITORY],
})
export class UsersModule {}
```

Example interface `features/users/domain/user.repository.interface.ts`:
```typescript
import type { User } from '@prisma/client';

export const USER_REPOSITORY = 'USER_REPOSITORY';

export interface UserRepository {
  findByEmail(email: User['email']): Promise<User | null>;
  findAll(): Promise<User[]>;
}
```

Example integration `features/users/infrastructure/prisma-user.repository.ts`:
```typescript
import { Injectable } from '@nestjs/common';
import { User } from '@prisma/client';

import { PrismaService } from '../../../prisma/prisma.service';
import { UserRepository } from '../domain/user.repository.interface';

@Injectable()
export class PrismaUserRepository implements UserRepository {
  constructor(private readonly prisma: PrismaService) {}

  async findByEmail(email: User['email']): Promise<User | null> {
    return this.prisma.user.findUnique({
      where: { email },
    });
  }

  async findAll(): Promise<User[]> {
    return this.prisma.user.findMany();
  }
}

```

- Focus on domain logic and user action.
- Reflects bridge between domain, infrastructure (database) and presentation (controller).
- Domain objects received are validated by `class-validator`.
- Domain specific requirements can be checked here. 
- A Use Case is the only layer handling Domain objects and business logic.
  
Example:
```typescript
import { Inject, Injectable } from '@nestjs/common';

import { UserDomain } from '../../domain/user.domain';
import { USER_REPOSITORY, UserRepository } from '../../domain/user.repository.interface';
import { UserMapper } from '../../presentation/user.mapper';

@Injectable()
export class GetAllUsersUseCase {
  constructor(
    @Inject(USER_REPOSITORY)
    private readonly userRepository: UserRepository,
    private readonly userMapper: UserMapper,
  ) {}

  async execute(): Promise<UserDomain[]> {
    const users = await this.userRepository.findAll();
    return users.map((user) => this.userMapper.toDomain(user));
  }
}
```

- Separate logic (store) from UI (component).
- Avoid technical function (e.g. `setDialogOpen`), prefer user actions (`openDialog`, `closeDialog`).
- Always validate `state` before affecting using @validator.ts.
- Use `makeAutoObservable` in the store constructor.
- Wrap state mutations inside `runInAction()`.
- Use `computed properties` for all derived values, even small (e.g., `instructionLength`).
- Inject the store into the parent component for better state management.
- Implement [loadable.interface.ts](mdc:apps/frontend/app/interfaces/loadable.interface.ts) is component have a state loadable from API.

Interface Example `features/dashboard/custom-instructions/custom-instructions.type.ts`: 
```typescript
import type { ProjectPromptType } from '@le-journal/shared-types';

import type { Actionable, Statable } from '~/interfaces/component.interface';
import type { Loadable } from '~/interfaces/loadable.interface';

interface CustomInstructionsState extends Statable<ProjectPromptType> {
  isDialogOpen: boolean;
}

interface CustomInstructionsActions extends Actionable<ProjectPromptType> {
  openDialog: () => void;
  closeDialog: () => void;
}

export interface CustomInstructions
  extends CustomInstructionsState,
    CustomInstructionsActions,
    Loadable<ProjectPromptType> {}
```

Store Example `features/dashboard/custom-instructions/custom-instructions.store.ts`:
```typescript
import type { ProjectPromptType } from '@le-journal/shared-types';
import { makeAutoObservable, runInAction } from 'mobx';

import type { CustomInstructions } from './custom-instructions.type';

import type { Loadable } from '~/interfaces/loadable.interface';
import { clientFetch } from '~/lib/api-fetcher.client';
import { verify } from '~/lib/validator';

export class CustomInstructionsStore implements CustomInstructions, Loadable<ProjectPromptType> {
  state: ProjectPromptType | null = null;

  isDialogOpen = false;
  isLoading = true;
  isSubmitting = false;

  constructor() {
    makeAutoObservable(this);
  }

  init = (prompt: ProjectPromptType): void => {
    verify(prompt);

    runInAction(() => {
      this.state = prompt;
      this.isLoading = false;
    });
  };

  save = async (event: React.FormEvent<HTMLFormElement>): Promise<void> => {
    const updatedState = await clientFetch<ProjectPromptType>(event, this.state);

    this.init(updatedState);
  };

  changeInstruction = (instruction: string): void => {
    if (this.state === null) {
      throw new Error('State is null');
    }

    runInAction(() => {
      this.state!.promptInstruction = instruction;
    });
  };

  openDialog = (): void => {
    this.isDialogOpen = true;
  };

  closeDialog = (): void => {
    this.isDialogOpen = false;
  };

  get instructionLength(): number {
    return this.state?.promptInstruction.length ?? 0;
  }
}
```

- Check all packages versions every time:
  - root monorepo: [package.json](mdc:package.json)
  - backend: [package.json](mdc:apps/backend/package.json)
  - frontend: [package.json](mdc:apps/frontend/package.json)
  - shared-types: [package.json](mdc:packages/shared-types/package.json)
- Always ask before adding new packages.
- Use `pnpm`, never `npm`.

- `ValidationPipe` might no be necessary because `main.ts` uses `useGlobalPipes`.
- Controllers handle only DTOs for a clear, decoupled API.
- Controllers call use-cases only, no service or repository calls.
- Use [api-response.decorator.ts](mdc:apps/backend/src/infrastructure/http/api-response.decorator.ts) and [api-response-redirect.decorator.ts](mdc:apps/backend/src/infrastructure/http/api-response-redirect.decorator.ts)

Example `presentation/controllers/projects.controller.ts`:
```typescript
@ApiTags('Projects')
@Controller('projects')
export class ProjectsController {
  constructor(
    private readonly createProjectUseCase: CreateProjectUseCase,
    private readonly projectMapper: ProjectMapper,
  ) {}

  @Post('create')
  @ApiAuthOperation('Cr√©er un nouveau projet.', {
    type: Project,
  })
  @UseGuards(JwtAuthGuard, CheckOnboardingGuard)
  async createProject(@GetUser() user: UserDomain): Promise<Project> {
    const projectDomain = await this.createProjectUseCase.execute({
      userId: user.id,
      userEmail: user.email,
    });

    return this.projectMapper.toDTO(projectDomain);
  }
```

- Use `class-validator` annotations if data needs to be validation backend only.
- Use [api-domain-property.decorator.ts](mdc:apps/backend/src/infrastructure/http/api-domain-property.decorator.ts) 

Example:
```typescript
export class ProjectCreateDomain {
  @Property('name')
  @IsString()
  @IsNotEmpty()
  name!: string;

  @Property('slug')
  @IsString()
  @IsNotEmpty()
  slug!: string;

  @Property('userId')
  @IsString()
  @IsNotEmpty()
  userId!: string;

  @Property('emailAlias')
  @IsEmail()
  @IsNotEmpty()
  emailAlias!: string;

  @Property('number')
  @IsNumber()
  @IsNotEmpty()
  projectNumber!: number;

  constructor(project: ProjectCreateDomain) {
    Object.assign(this, project);
  }
}
```

- Libs: NestJS 11, RxJS 7.8, Node 22.
- NestJS good pratices must be checked.
- RxJS must be used at its best.
- Throw exception early with meaning descriptions, names or params.
- Create custom exceptions when domain specific.
- Focus on domain logic.
- Focus on DDD and Clean Architecture.

Language:
- French language in UI (labels, texts, placeholders...), Exceptions, API documentation...
- English in code, logs etc.

Sharing code:
- Place shared data types in `packages/shared-types`.
- One file per type, export everything from [index.ts](mdc:packages/shared-types/src/index.ts).

Simplified code:
- Force explicit constants instead of magic numbers.
- Write clear and simple conditions.
- No double negatives.
- Prioritize readable variable names, even if longer.
- Simplify loops using `map()`, `filter()`, or `reduce()`.

Type safe code:
- Always type function params and returns.
- Never use `as` keyword.

Feature focus code:
- Reflect business needs in the code.
- Avoid technical function names, favor domain language.
- Model objects closely to business concepts.

Sizes:
- Functions: Max 20-30 lines.
- Classes/Files: Max 200-300 lines.
- Folders: Max 7-10 files.

Responsability:
- One file per feature, split responsibility across files (SRP).

Comments:
- No comments by default.
- Comments only for complex logic or interfaces.

Forbidden:
- Anemic models (avoid trivial `getId`/`setId`).
- Function names with no actions (avoid `setUsers`, prefer `loadUsers`). 
- No interface prefix `IUser` or type suffix `UserType`. 

Lint & Error
- Follow `@typescript-eslint/strict-boolean-expressions` (avoid `if(!obj)`, prefer `if (obj === undefined)`).
- Type errors with `catch(error: unknown | Error)`.


---
description: Global rules when generating code.
globs: 
---
# Roles

- You are the AI Editor, responsible of coding a high quality code.

# Installation

- Ask before installating new packages.
- Use latest available version of packages.
- Use PNPM

# Code generation

- **Strict Type for every variables, functions and components.**
- Minimal file size.
- Use single responsibility principle.
- Never generate anemic models, `setId()`, `getId()` functions are forbidden.
- Never comment code, except for complexe logic, interfaces, configuration.

## Data fetching

- Use loaders.
- Use defer whenever possible.
- Use [fetcher.ts](mdc:apps/frontend/app/utils/api/fetcher.ts) (add routes if necessary).

# Tests

- Never generate Retires!

## Error

- Type `catch(error: unknown)`
- Use [error.ts](mdc:apps/frontend/app/utils/api/error.ts) to handle errors.

## Lint

- Respect `eslint@typescript-eslint/strict-boolean-expressions`, do not `if (!obj)`, prefer ` if (obj === null)`.

# Functions

- Must reflect user actions.
- Focus on use-case.
- Avoid technical names:
  - No `setNewsletters()`, `loadNewsletters()` is a true user action
  - Prefer domain actions.

# Bug finding

- Alaways propose top 3 solutions.
- Indicate confidence score.
- Ask user to choose.

# Common types

- Data type that are used from backend api to frontend components must be in "packages/shared-types".
- Must be focused on feature, small sub-types only are allowed.
- Prefer one file per type.
- Export must be made in [index.ts](mdc:packages/shared-types/src/index.ts).

# Interfaces and Types

- No prefix for interfaces (e.g. no `IUser`).
- No suffix for types (e.g. no `UserType`)
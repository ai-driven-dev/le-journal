---
description: Logging any business logic call (like use-cases), input, then output
globs: apps/backend/**/*.ts
---
## Logging Levels
- Use only 4 logging methods: debug(), log(), warn(), error()
- debug(): Use for technical details and development information
- log(): Use for important business events and successes
- warn(): Use for abnormal but non-critical situations
- error(): Use for exceptions and critical failures

## Context Structure
- Always provide service and method names
- Include metadata for business data
- Pass Error objects directly in error context
- Use correlationId for tracing related operations
- Structure all logs in JSON format

## Example: Error Logging
```typescript
this.logger.error('User creation failed', {
  service: 'UserService',
  method: 'createUser',
  metadata: {
    email: user.email,
    role: user.role
  },
  error: error
});
```

## Example: Business Event
```typescript
this.logger.log('Payment processed', {
  service: 'PaymentService',
  method: 'processPayment',
  correlationId: 'order-123',
  metadata: {
    orderId: order.id,
    amount: payment.amount
  }
});
```
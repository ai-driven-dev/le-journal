---
description: When generating any backend code.
globs: apps/backend/**/*.ts
---
API & Controllers:
- No direct CRUD, use domain-driven use-cases.
- Document with Swagger (NestJS), in English.
- Each controller matches a specific domain use-case.
- Swagger annotations.
- Validate received data with `ValidationPipe` and `transform`
- API always returns DTOs.

Exceptions:
- Throw exception the more you can.
- Always be specific, error message must contain input parameters for easy debuging.
- Use NestJS or the framework exceptions when technical.
- Create custom exceptions when domain specific.

Logging:
- Avoid "logger.error()", throw Exception instead (because logger catchs exceptions).
- On use-cases: log `debug` the input, log `success` the output.

Loging use-case example:
```ts
  async execute(projectId: string, promptInstruction: string): Promise<Project> {
    this.logger.debug(`Updating Project Prompt`, this.constructor.name, {
      projectId,
      promptInstruction,
    });

    const project = await this.projectRepository.findById(projectId);

    if (project === null) {
      throw new NotFoundException(`Project with id ${projectId} not found`);
    }

    const updatedProject = await this.projectRepository.update(projectId, { promptInstruction });

    this.logger.success(`Project Prompt Updated`, this.constructor.name, {
      projectId,
      promptInstruction: updatedProject.prompt_instruction,
    });

    return updatedProject;
  }
```

DTO:
<!-- - No dedicated mapper, `mapped-types` allowed.  -->
- Prisma Model is imported with `Model` suffix (e.g `import { Prisma, User as UserModel } from '@prisma/client';`)
- Create and Update DTOs are always implementing Prisma's corresponding interface (e.g. `export class CreateUserDto implements Prisma.UserCreateInput`)
- Map fields individually (e.g `this.id = user.id` in constructor), no `Object.assign` etc.
- Use `class-validator` and `Swagger` documentation with annotations on fields.
- DTOs always implements interfaces in `shared-types` to ensure frontend <-> backend type coherence.

Example of files structure:
```text
├── application
│   ├── create-project.use-case.ts
│   ├── get-project.use-case.ts
│   └── update-project-prompt.use-case.ts
├── domain
│   └── project.repository.interface.ts
├── infrastructure
│   └── prisma-project.repository.ts
├── presentation
│   ├── projects.controller.ts
│   └── project.dto.ts
└── projects.module.ts
```
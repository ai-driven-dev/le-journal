---
description: When generating any backend code.
globs: apps/backend/**/*.ts
---
API & Controllers:
- No direct CRUD, use domain-driven use-cases.
- Document with Swagger (NestJS), in English.
- Each controller matches a specific domain use-case.
- Swagger annotations.
- Validate received data with `ValidationPipe` and `transform`
- API always returns DTOs.

DTO:
<!-- - No dedicated mapper, `mapped-types` allowed.  -->
- Prisma Model is imported with `Model` suffix (e.g `import { Prisma, User as UserModel } from '@prisma/client';`)
- Create and Update DTOs are always implementing Prisma's corresponding interface (e.g. `export class CreateUserDto implements Prisma.UserCreateInput`)
- Map fields individually (e.g `this.id = user.id` in constructor), no `Object.assign` etc.
- Use `class-validator` and `Swagger` documentation with annotations on fields.

Example of files structure:
```text
├── application
│   ├── create-project.use-case.ts
│   ├── get-project.use-case.ts
│   └── update-project-prompt.use-case.ts
├── domain
│   └── project.repository.interface.ts
├── infrastructure
│   └── prisma-project.repository.ts
├── presentation
│   ├── projects.controller.ts
│   └── project.dto.ts
└── projects.module.ts
```
---
description: Rules for frontend code.
globs: 
---
# Frontends Rules

- Use versions from [package.json](mdc:apps/frontend/package.json)
- use "/~" for root import.

## State

- Use Smart/Dump component pattern:
  - Smart : MobX for state.
  - Dump : React Component, only the UI, minimal logic.
- No React Hook only if stricly necessary.
Use "mobx-react-lite" instead of "mobx-react".
- Use "mobx" for core.
- Use `makeAutoObservable`, no annotations.
- Computed for Derived State.
- Actions to Modify State.
- runInAction for Side Effects (especially when async) and Reactions.
- Split store in feature the more you can. No large stores, split by parent > children logic.

## Store creation

- Remember to generate factory at the bottom of a store.
  - Use that comment before: `// eslint-disable-next-line @typescript-eslint/explicit-function-return-type`
- Inject that store in the parent.
- Use static displayName when creating new component.

## Architecture

- A feature can contain sub-features. It follows same architectural folder structure.
- Use feature based folder structure.
 
Example:
```text
user-profile/
| user-profile.component.tsx # minimal logic, only UI component
| user-profile.store.ts # for actions, computed, reactions...
| user-profile.hook.ts # if necessary
| user-profile.context.ts # if necessary, for providers
| user-profile.mock.ts # test data for UI
| user-profile.type.ts # for store types: state, actions...
```

Example:
```text
newsletter.ts
user.ts
article.ts
profile.ts
```

## Remix

- Always use "Remix" instead of "NextJS".
- Use "@remix-run/node" for server rendering.
- Use "@remix-run/react" for client rendering.
- Do not return json(), use plain objects instead.

## Testing

- Test with Vitest.

## Config

- Use "Vite" instead of "Webpack".
- Use "eslint.config.js" with flat config when using Eslint.